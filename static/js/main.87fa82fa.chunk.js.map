{"version":3,"sources":["Components/MainPage/main.module.scss","App.module.scss","API/API.js","Redux/mainPageReducer.js","Redux/redux.js","Components/RegistrationPage/RegistrationPageContainer.jsx","Components/LoginPage/loginPageContainer.jsx","Components/MainPage/MainPageContainer.jsx","helpers/token.js","App.jsx","serviceWorker.js","index.jsx","Components/RegistrationPage/registration.module.scss","Components/LoginPage/login.module.scss"],"names":["module","exports","instance","axios","baseURL","initialState","username","token","value","status","error","setTokenAC","data","type","setErrorAC","mainReducer","state","action","user","request","reducers","combineReducers","mainPage","mainPageReducer","store","createStore","applyMiddleware","thunkMiddleware","window","RegistrationPageContainer","connect","RegistrationThunkCreator","dispatch","post","then","response","postData","email","password","name","catch","errors","props","console","log","to","className","cls","wrapper","initialValues","confirm_password","onSubmit","values","a","setSubmitting","Promise","resolve","setTimeout","validationSchema","Yup","shape","oneOf","touched","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","form","htmlFor","style","display","id","placeholder","onChange","onBlur","input","undefined","String","email2","onClick","disabled","LoginPageContainer","thunkCreator","loginData","localStorage","setItem","mainPageContainer","setValueAC","useState","setName","useEffect","key","getItem","get","headers","removeItem","history","push","fetchData","App","path","component","exact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.87fa82fa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"main_wrapper__36HIk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__3Aexq\",\"ul\":\"App_ul__zXSjm\",\"ticketsArea\":\"App_ticketsArea__lzTW3\",\"wrapper\":\"App_wrapper__2HLsp\",\"img\":\"App_img__3MMz6\"};","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://conduit.productionready.io',\r\n});\r\n\r\n\r\nexport const postData = data =>\r\ninstance.post('/api/users', data)\r\n.then(response => {\r\n  return response\r\n})\r\n\r\n\r\nexport const loginData = (data) => \r\n  instance.post('/api/users/login', data)\r\n  .then(response => {\r\n    return response\r\n  })\r\n\r\n\r\nexport const authData = (data) => \r\n  instance.get('/api/user', {\r\n    withCredentials: true,\r\n    headers: {\r\n      Authorization: data\r\n    }\r\n  })","import { loginData, postData } from '../API/API'\r\n\r\nconst SET_TOKEN = 'SET_TOKEN';\r\nconst SET_VALUE = 'SET_VALUE';\r\nconst SET_ERROR = 'SET_ERROR';\r\n\r\nlet initialState = {\r\n    username: '',\r\n    token: '',\r\n    value: null,\r\n    status: null,\r\n    error: null\r\n}\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TOKEN:\r\n            return {\r\n                ...state,\r\n                token: action.data.data.user.token,\r\n                username: action.data.data.user.username,\r\n                status: action.data.request.status,\r\n            };\r\n        case SET_VALUE:\r\n            \r\n            return {\r\n                ...state,\r\n                status: action.data.data\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.data\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setTokenAC = (data) => ({ type: SET_TOKEN, data });\r\nexport const setValueAC = (data) => ({ type: SET_VALUE, data });\r\nexport const setErrorAC = (data) => ({ type: SET_ERROR, data });\r\n\r\nexport const thunkCreator = (data) => {\r\n    return (dispatch) => {\r\n        loginData({\r\n            user: {\r\n                email: data.email,\r\n                password: data.password,\r\n            }\r\n        })\r\n            .then(response => {\r\n                dispatch(setTokenAC(response));\r\n                localStorage.setItem('cool-jwt', response.data.user.token);\r\n                localStorage.setItem('cool-name', response.data.user.username);\r\n            })\r\n            .catch(error => {\r\n                dispatch(setErrorAC(error.response.data.errors))\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const RegistrationThunkCreator = (data) => {\r\n    return (dispatch) => {\r\n        postData({\r\n            user: {\r\n                email: data.email,\r\n                password: data.password,\r\n                username: data.name,\r\n            }\r\n        })\r\n            .then(response => {\r\n                dispatch(setTokenAC(response))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setErrorAC(error.response.data.errors))\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default mainReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport mainPageReducer from './mainPageReducer';\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    mainPage: mainPageReducer,\r\n})\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import { connect } from 'react-redux';\r\nimport {RegistrationThunkCreator} from '../../Redux/mainPageReducer';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport { Input } from 'antd';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as Yup from 'yup';\r\nimport cls from './registration.module.scss';\r\n\r\nconst RegistrationPage = props => {\r\n    const { status, error, RegistrationThunkCreator } = props;\r\n    console.log(error)\r\n    if (status === 200) {\r\n      return <Redirect to={\"/forum\"} />\r\n    }\r\n    return (\r\n      <div className={cls.wrapper}>\r\n        <NavLink to='/forum/LoginPage'> Login page</NavLink>\r\n        <Formik\r\n          initialValues={{ email: \"\", name: \"\", password: \"\", confirm_password: \"\" }}\r\n          onSubmit={async (values, { setSubmitting }) => {\r\n            await new Promise(resolve => setTimeout(resolve, 1000));\r\n            setSubmitting(false);\r\n            RegistrationThunkCreator({\r\n              email: values.email,\r\n              password: values.password,\r\n              name: values.name\r\n            })\r\n          }}\r\n          validationSchema={Yup.object().shape({\r\n            confirm_password: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords dont match'),\r\n          })}\r\n        >\r\n  \r\n          {props => {\r\n            const {\r\n              values,\r\n              touched,\r\n              errors,\r\n              dirty,\r\n              isSubmitting,\r\n              handleChange,\r\n              handleBlur,\r\n              handleSubmit,\r\n              handleReset\r\n            } = props;\r\n            return (\r\n              <form onSubmit={handleSubmit} className={cls.form}>\r\n                <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                  Email\r\n              </label>\r\n                <Input\r\n                  id=\"email\"\r\n                  placeholder=\"Enter your email\"\r\n                  type=\"text\"\r\n                  value={values.email}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={cls.input}\r\n                />\r\n                {error !== null && error.email !== undefined && (\r\n                  <div>{`Email ${String(error.email)}`}</div>\r\n                )}\r\n                <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                  Name\r\n              </label>\r\n                <Input\r\n                  id=\"name\"\r\n                  placeholder=\"Enter your name\"\r\n                  type=\"text\"\r\n                  value={values.email2}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={cls.input}\r\n                />\r\n                {error !== null && error.username !== undefined && (\r\n                  <div>{`Name ${String(error.username)}`}</div>\r\n                )}\r\n                <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                  Password\r\n              </label>\r\n                <Input\r\n                  id=\"password\"\r\n                  placeholder=\"Enter your name\"\r\n                  type=\"password\"\r\n                  value={values.email2}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={cls.input}\r\n                />\r\n                {error !== null && error.password !== undefined && (\r\n                  <div>{`Password ${String(error.password)}`}</div>\r\n                )}\r\n                <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                  Repeat Password\r\n              </label>\r\n                <Input\r\n                  id=\"confirm_password\"\r\n                  placeholder=\"Enter your name\"\r\n                  type=\"password\"\r\n                  value={values.email2}\r\n                  onChange={handleChange}\r\n                  onBlur={handleBlur}\r\n                  className={cls.input}\r\n                />\r\n                {errors.confirm_password && touched.confirm_password && (\r\n                  <div>{errors.confirm_password}</div>\r\n                )}\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"outline\"\r\n                  onClick={handleReset}\r\n                  disabled={!dirty || isSubmitting}\r\n                >\r\n                  Reset\r\n              </button>\r\n                <button\r\n                 type=\"submit\" disabled={isSubmitting}>\r\n                  Submit\r\n                </button>\r\n              </form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </div>\r\n    )\r\n  }\r\n\r\nconst mapStateToProps = (state) => ({\r\n    error: state.mainPage.error,\r\n    status: state.mainPage.status\r\n})\r\n\r\nconst RegistrationPageContainer = connect(mapStateToProps,{RegistrationThunkCreator})(RegistrationPage)\r\n\r\nexport default RegistrationPageContainer;","import { connect } from 'react-redux';\r\nimport {thunkCreator} from '../../Redux/mainPageReducer';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport { Input } from 'antd';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport cls from './login.module.scss';\r\n\r\nconst LoginPage = (props) => {\r\n    const { status, error, thunkCreator } = props;\r\n    if (status === 200) {\r\n        return <Redirect to={\"/forum\"} />\r\n    }\r\n\r\n    return (\r\n        <div className={cls.wrapper}>\r\n            <NavLink to='/forum/Registration'> Registration page</NavLink>\r\n            <Formik\r\n                initialValues={{ email: \"\", password: \"\" }}\r\n                onSubmit={async values => {\r\n                    await new Promise(resolve => setTimeout(resolve, 500));\r\n                    thunkCreator({\r\n                        email: values.email,\r\n                        password: values.password\r\n                    })\r\n                }}\r\n            >\r\n                {props => {\r\n                    const {\r\n                        values,\r\n                        dirty,\r\n                        isSubmitting,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                        handleReset\r\n                    } = props;\r\n                    return (\r\n                        <form onSubmit={handleSubmit} className={cls.form}>\r\n                            <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                                Email\r\n                             </label>\r\n                            <Input\r\n                                id=\"email\"\r\n                                placeholder=\"Enter your email\"\r\n                                type=\"text\"\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                className={cls.input}\r\n                            />\r\n                            <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                                password\r\n                                </label>\r\n                            <Input\r\n                                id=\"password\"\r\n                                placeholder=\"Enter your name\"\r\n                                type=\"password\"\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                className={cls.input}\r\n                            />\r\n                            {error !== null && (\r\n                                <div>{`email or password ${error[\"email or password\"]}`}</div>\r\n                            )}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"outline\"\r\n                                onClick={handleReset}\r\n                                disabled={!dirty || isSubmitting}\r\n                            >\r\n                                Reset\r\n                                 </button>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={isSubmitting}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n                        </form>\r\n                    );\r\n                }}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    error: state.mainPage.error,\r\n    status: state.mainPage.status\r\n})\r\n\r\nconst LoginPageContainer = connect(mapStateToProps,{thunkCreator})(LoginPage)\r\n\r\nexport default LoginPageContainer;","import { connect } from 'react-redux';\r\nimport { setValueAC } from '../../Redux/mainPageReducer';\r\nimport React, { useState, useEffect } from 'react';\r\nimport cls from './main.module.scss';\r\nimport { removeJwt, getJwt, getName } from '../../helpers/token';\r\nimport axios from 'axios';\r\n\r\nconst MainPage = (props) => {\r\n  const [name, setName] = useState(null)\r\n\r\n  useEffect(() => {\r\n    const key = getJwt()\r\n    const fetchData = async () => {\r\n      if (key !== null) {\r\n        try {\r\n          const result = await axios.get(`https://conduit.productionready.io/api/user`,\r\n            {\r\n              headers: {\r\n                'Content-Type': 'application/json',\r\n                'Accept': 'application/json',\r\n                'Authorization': `Token ${key}`,\r\n              }\r\n            })\r\n          setName(getName())\r\n        } catch (error) {\r\n          if (error) {\r\n            removeJwt('cool-jwt')\r\n            props.setValueAC({data: 401});\r\n            props.history.push('/forum/LoginPage')\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (name === null) {\r\n      fetchData();\r\n    }\r\n  }, [name, props ])\r\n\r\n  const deleteToken = () => {\r\n    props.history.push('/forum/LoginPage');\r\n    return props.setValueAC({data: 401});\r\n  }\r\n\r\n  return (\r\n        <div className={cls.wrapper}>\r\n          <h3> {name} </h3>\r\n          <button\r\n            onClick={() => deleteToken()}\r\n          > Выйти </button>\r\n        </div>\r\n  )\r\n}\r\n\r\nlet mapStateToProps = (state) => (\r\n  {\r\n    username: state.mainPage.username,\r\n    token: state.mainPage.token,\r\n    status: state.mainPage.status\r\n  }\r\n)\r\n\r\nconst mainPageContainer = connect(mapStateToProps, { setValueAC })(MainPage);\r\n\r\nexport default mainPageContainer;","export const getJwt = () => {\r\n    return localStorage.getItem('cool-jwt');\r\n  };\r\n\r\n  export const getName = () => {\r\n    return localStorage.getItem('cool-name');\r\n  }\r\n\r\n  export const isAuth = () => {\r\n    return localStorage.getItem('cool-jwt') !== null;\r\n  };\r\n\r\n  export const removeJwt = () => {\r\n      return localStorage.removeItem('cool-jwt');\r\n  }","import React from 'react';\r\nimport './App.module.scss';\r\nimport RegistrationPageContainer from './Components/RegistrationPage/RegistrationPageContainer';\r\nimport LoginPageContainer from './Components/LoginPage/loginPageContainer';\r\nimport mainPageContainer from './Components/MainPage/MainPageContainer'\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Route path='/forum/LoginPage' component={LoginPageContainer} />\r\n      <Route path='/forum/Registration' component={RegistrationPageContainer}/>\r\n      <Route exact path='/forum/' component={mainPageContainer} />\r\n    </BrowserRouter>\r\n  ) \r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './Redux/redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"registration_wrapper__3w-sm\",\"form\":\"registration_form__1d1UH\",\"input\":\"registration_input__3F6qd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"login_wrapper__1DHUi\",\"form\":\"login_form__2l9yv\",\"input\":\"login_input__2o3z6\"};"],"sourceRoot":""}