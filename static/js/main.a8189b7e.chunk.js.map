{"version":3,"sources":["Components/MainPage/main.module.scss","App.module.scss","API/API.js","Redux/mainPageReducer.js","Redux/redux.js","Components/RegistrationPage/Registration.jsx","Components/RegistrationPage/RegistrationPageContainer.jsx","Components/LoginPage/loginPage.jsx","Components/LoginPage/loginPageContainer.jsx","Components/MainPage/MainPage.jsx","Components/MainPage/MainPageContainer.jsx","App.jsx","serviceWorker.js","index.jsx","Components/RegistrationPage/registration.module.scss","Components/LoginPage/login.module.scss"],"names":["module","exports","instance","axios","baseURL","initialState","username","token","value","status","error","setTokenAC","data","type","setErrorAC","mainReducer","state","action","user","request","reducers","combineReducers","mainPage","mainPageReducer","store","createStore","applyMiddleware","thunkMiddleware","window","RegistrationPage","props","RegistrationThunkCreator","console","log","to","className","cls","wrapper","initialValues","email","name","password","confirm_password","onSubmit","values","a","setSubmitting","Promise","resolve","setTimeout","validationSchema","Yup","shape","oneOf","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","form","htmlFor","style","display","id","placeholder","onChange","onBlur","input","undefined","String","email2","onClick","disabled","RegistrationPageContainer","connect","dispatch","post","then","response","postData","catch","LoginPage","thunkCreator","LoginPageContainer","loginData","length","mainPageContainer","App","path","component","exact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a8189b7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"main_wrapper__36HIk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__3Aexq\",\"ul\":\"App_ul__zXSjm\",\"ticketsArea\":\"App_ticketsArea__lzTW3\",\"wrapper\":\"App_wrapper__2HLsp\",\"img\":\"App_img__3MMz6\"};","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://conduit.productionready.io',\r\n});\r\n\r\n\r\nexport const postData = data =>\r\ninstance.post('/api/users', data)\r\n.then(response => {\r\n  return response\r\n})\r\n\r\n\r\nexport const loginData = (data) => \r\n  instance.post('/api/users/login', data)\r\n  .then(response => {\r\n    return response\r\n  })\r\n\r\n\r\nexport const authData = (data) => \r\n  instance.get('/api/user', {\r\n    withCredentials: true,\r\n    headers: {\r\n      Authorization: data\r\n    }\r\n  })","import { loginData, postData } from '../API/API'\r\n\r\nconst SET_TOKEN = 'SET_TOKEN';\r\nconst SET_VALUE = 'SET_VALUE';\r\nconst SET_ERROR = 'SET_ERROR';\r\n\r\nlet initialState = {\r\n    username: '',\r\n    token: '',\r\n    value: null,\r\n    status: null,\r\n    error: null\r\n}\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_TOKEN:\r\n            return {\r\n                ...state,\r\n                token: action.data.data.user.token,\r\n                username: action.data.data.user.username,\r\n                status: action.data.request.status,\r\n            };\r\n        case SET_VALUE:\r\n            return {\r\n                ...state,\r\n                value: action.data\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.data\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setTokenAC = (data) => ({ type: SET_TOKEN, data });\r\nexport const setValueAC = (data) => ({ type: SET_VALUE, data });\r\nexport const setErrorAC = (data) => ({ type: SET_ERROR, data });\r\n\r\nexport const thunkCreator = (data) => {\r\n    return (dispatch) => {\r\n        loginData({\r\n            user: {\r\n                email: data.email,\r\n                password: data.password,\r\n            }\r\n        })\r\n            .then(response => {\r\n                dispatch(setTokenAC(response))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setErrorAC(error.response.data.errors))\r\n            })\r\n    }\r\n\r\n}\r\n\r\nexport const RegistrationThunkCreator = (data) => {\r\n    return (dispatch) => {\r\n        postData({\r\n            user: {\r\n                email: data.email,\r\n                password: data.password,\r\n                username: data.name,\r\n            }\r\n        })\r\n            .then(response => {\r\n                dispatch(setTokenAC(response))\r\n            })\r\n            .catch(error => {\r\n                dispatch(setErrorAC(error.response.data.errors))\r\n            })\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default mainReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport mainPageReducer from './mainPageReducer';\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    mainPage: mainPageReducer,\r\n})\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport { Input } from 'antd';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport * as Yup from 'yup';\r\nimport cls from './registration.module.scss';\r\n\r\nconst RegistrationPage = props => {\r\n  const { status, error, RegistrationThunkCreator } = props;\r\n  console.log(error)\r\n  if (status === 200) {\r\n    return <Redirect to={\"/forum\"} />\r\n  }\r\n\r\n  return (\r\n    <div className={cls.wrapper}>\r\n      <NavLink to='/forum/LoginPage'> Login page</NavLink>\r\n      <Formik\r\n        initialValues={{ email: \"\", name: \"\", password: \"\", confirm_password: \"\" }}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          await new Promise(resolve => setTimeout(resolve, 1000));\r\n          setSubmitting(false);\r\n          RegistrationThunkCreator({\r\n            email: values.email,\r\n            password: values.password,\r\n            name: values.name\r\n          })\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          confirm_password: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords dont match'),\r\n        })}\r\n      >\r\n\r\n        {props => {\r\n          const {\r\n            values,\r\n            touched,\r\n            errors,\r\n            dirty,\r\n            isSubmitting,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            handleReset\r\n          } = props;\r\n          return (\r\n            <form onSubmit={handleSubmit} className={cls.form}>\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Email\r\n            </label>\r\n              <Input\r\n                id=\"email\"\r\n                placeholder=\"Enter your email\"\r\n                type=\"text\"\r\n                value={values.email}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={cls.input}\r\n              />\r\n              {error !== null && error.email !== undefined && (\r\n                <div>{`Email ${String(error.email)}`}</div>\r\n              )}\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Name\r\n            </label>\r\n              <Input\r\n                id=\"name\"\r\n                placeholder=\"Enter your name\"\r\n                type=\"text\"\r\n                value={values.email2}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={cls.input}\r\n              />\r\n              {error !== null && error.username !== undefined && (\r\n                <div>{`Name ${String(error.username)}`}</div>\r\n              )}\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Password\r\n            </label>\r\n              <Input\r\n                id=\"password\"\r\n                placeholder=\"Enter your name\"\r\n                type=\"password\"\r\n                value={values.email2}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={cls.input}\r\n              />\r\n              {error !== null && error.password !== undefined && (\r\n                <div>{`Password ${String(error.password)}`}</div>\r\n              )}\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Repeat Password\r\n            </label>\r\n              <Input\r\n                id=\"confirm_password\"\r\n                placeholder=\"Enter your name\"\r\n                type=\"password\"\r\n                value={values.email2}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={cls.input}\r\n              />\r\n              {errors.confirm_password && touched.confirm_password && (\r\n                <div>{errors.confirm_password}</div>\r\n              )}\r\n              <button\r\n                type=\"button\"\r\n                className=\"outline\"\r\n                onClick={handleReset}\r\n                disabled={!dirty || isSubmitting}\r\n              >\r\n                Reset\r\n            </button>\r\n              <button\r\n               type=\"submit\" disabled={isSubmitting}>\r\n                Submit\r\n              </button>\r\n            </form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\nexport default RegistrationPage;\r\n","import { connect } from 'react-redux';\r\nimport RegistrationPage from './Registration'\r\nimport {RegistrationThunkCreator} from '../../Redux/mainPageReducer';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    error: state.mainPage.error,\r\n    status: state.mainPage.status\r\n})\r\n\r\nconst RegistrationPageContainer = connect(mapStateToProps,{RegistrationThunkCreator})(RegistrationPage)\r\n\r\nexport default RegistrationPageContainer;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport { Input } from 'antd';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport cls from './login.module.scss'\r\n\r\nconst LoginPage = (props) => {\r\n    const { status, error, thunkCreator } = props;\r\n    if (status === 200) {\r\n        return <Redirect to={\"/forum\"} />\r\n    }\r\n\r\n    return (\r\n        <div className={cls.wrapper}>\r\n            <NavLink to='/forum/Registration'> Registration page</NavLink>\r\n            <Formik\r\n                initialValues={{ email: \"\", password: \"\" }}\r\n                onSubmit={async values => {\r\n                    await new Promise(resolve => setTimeout(resolve, 500));\r\n                    thunkCreator({\r\n                        email: values.email,\r\n                        password: values.password\r\n                    })\r\n                }}\r\n            >\r\n                {props => {\r\n                    const {\r\n                        values,\r\n                        dirty,\r\n                        isSubmitting,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                        handleReset\r\n                    } = props;\r\n                    return (\r\n                        <form onSubmit={handleSubmit} className={cls.form}>\r\n                            <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                                Email\r\n                             </label>\r\n                            <Input\r\n                                id=\"email\"\r\n                                placeholder=\"Enter your email\"\r\n                                type=\"text\"\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                className={cls.input}\r\n                            />\r\n                            <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                                password\r\n                                </label>\r\n                            <Input\r\n                                id=\"password\"\r\n                                placeholder=\"Enter your name\"\r\n                                type=\"password\"\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                className={cls.input}\r\n                            />\r\n                            {error !== null && (\r\n                                <div>{`email or password ${error[\"email or password\"]}`}</div>\r\n                            )}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"outline\"\r\n                                onClick={handleReset}\r\n                                disabled={!dirty || isSubmitting}\r\n                            >\r\n                                Reset\r\n                                 </button>\r\n                            <button\r\n                                type=\"submit\"\r\n                                disabled={isSubmitting}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n                        </form>\r\n                    );\r\n                }}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage;","import { connect } from 'react-redux';\r\nimport LoginPage from './loginPage'\r\nimport {setTokenAC} from '../../Redux/mainPageReducer';\r\nimport {thunkCreator} from '../../Redux/mainPageReducer';\r\n\r\nconst mapStateToProps = (state) => ({\r\n    error: state.mainPage.error,\r\n    status: state.mainPage.status\r\n})\r\n\r\nconst LoginPageContainer = connect(mapStateToProps,{setTokenAC, thunkCreator})(LoginPage)\r\n\r\nexport default LoginPageContainer;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport cls from './main.module.scss'\r\n\r\nconst mainPage = (props) => {\r\n  console.log(props)\r\n  if(props.token.length === 0)\r\n  {\r\n    return <Redirect to={\"/forum/loginPage\"} />  ;\r\n  }\r\n  const deleteToken = () => {\r\n    return props.setTokenAC({\r\n      data: {\r\n      user: {\r\n        token: '',\r\n        username: '',\r\n      }\r\n    },\r\n    request: {\r\n      status: 401\r\n    }\r\n    });\r\n  }\r\n    return (\r\n        <div className={cls.wrapper}>\r\n          <h3>{props.username} </h3>\r\n          <button \r\n          onClick={() => deleteToken()}\r\n          > Выйти </button> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default mainPage;","import { connect } from 'react-redux';\r\nimport mainPage from './MainPage';\r\nimport {setTokenAC} from '../../Redux/mainPageReducer'\r\n\r\nlet mapStateToProps = (state) => (\r\n  {\r\n    username: state.mainPage.username,\r\n    token: state.mainPage.token,\r\n  }\r\n)\r\n\r\n\r\n\r\nconst mainPageContainer = connect(mapStateToProps, {setTokenAC})(mainPage);\r\n\r\nexport default mainPageContainer;","import React from 'react';\r\nimport './App.module.scss';\r\nimport RegistrationPageContainer from './Components/RegistrationPage/RegistrationPageContainer';\r\nimport LoginPageContainer from './Components/LoginPage/loginPageContainer';\r\nimport mainPageContainer from './Components/MainPage/MainPageContainer'\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Route path='/forum/LoginPage' component={LoginPageContainer} />\r\n      <Route path='/forum/Registration' component={RegistrationPageContainer}/>\r\n      <Route exact path='/forum/' component={mainPageContainer} />\r\n    </BrowserRouter>\r\n  ) \r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './Redux/redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"registration_wrapper__3w-sm\",\"form\":\"registration_form__1d1UH\",\"input\":\"registration_input__3F6qd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"login_wrapper__1DHUi\",\"form\":\"login_form__2l9yv\",\"input\":\"login_input__2o3z6\"};"],"sourceRoot":""}