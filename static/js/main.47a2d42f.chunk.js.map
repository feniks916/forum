{"version":3,"sources":["Components/MainPage/main.module.scss","App.module.scss","Components/RegistrationPage/registration.module.scss","API/API.js","Redux/mainPageReducer.js","Redux/redux.js","helpers/token.js","Components/RegistrationPage/RegistrationPageContainer.jsx","Components/LoginPage/loginPageContainer.jsx","Components/MainPage/MainPageContainer.jsx","helpers/protectedRoute.jsx","App.jsx","serviceWorker.js","index.jsx","Components/LoginPage/login.module.scss"],"names":["module","exports","instance","axios","baseURL","interceptors","request","use","config","token","sessionStorage","getItem","headers","Authorization","initialState","username","value","status","error","setUserDataAC","name","type","payload","setErrorAC","mainReducer","state","action","reducers","combineReducers","userData","mainPageReducer","store","createStore","applyMiddleware","thunkMiddleware","getJwt","getName","isAuth","removeJwt","removeItem","RegistrationPageContainer","connect","RegistrationThunk","data","dispatch","a","registerData","user","email","password","post","response","setItem","errors","props","history","useHistory","push","className","cls","wrapper","initialValues","confirm_password","onSubmit","values","setSubmitting","Promise","resolve","setTimeout","validationSchema","Yup","shape","oneOf","touched","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","form","htmlFor","style","display","id","placeholder","onChange","onBlur","input","undefined","String","buttonsArea","to","onClick","disabled","LoginPageContainer","thunk","loginData","console","log","mainPageContainer","setStatusAC","useState","setName","useEffect","key","get","fetchData","ProtectedRoute","Component","component","rest","render","pathname","from","location","App","path","exact","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47a2d42f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"main_wrapper__36HIk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__3Aexq\",\"ul\":\"App_ul__zXSjm\",\"ticketsArea\":\"App_ticketsArea__lzTW3\",\"wrapper\":\"App_wrapper__2HLsp\",\"img\":\"App_img__3MMz6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"registration_wrapper__3w-sm\",\"form\":\"registration_form__1d1UH\",\"input\":\"registration_input__3F6qd\",\"buttonsArea\":\"registration_buttonsArea__18T8o\",\"errors\":\"registration_errors__1_bjh\"};","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://conduit.productionready.io',\r\n});\r\n\r\ninstance.interceptors.request.use(config => {\r\n  const token = sessionStorage.getItem('cool-jwt');\r\n  if (token) {\r\n    config.headers.Authorization = `Token ${token}`;\r\n  }\r\n  return config\r\n  })\r\n\r\nexport default instance;\r\n\r\nexport const register = registerData =>\r\ninstance.post('/api/users', registerData)\r\n\r\nexport const login = (loginData) => \r\n  instance.post('/api/users/login', loginData)\r\n","import { login, register } from '../API/API'\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\nconst SET_STATUS = 'SET_STATUS';\r\nconst SET_ERROR = 'SET_ERROR';\r\n\r\nlet initialState = {\r\n    username: '',\r\n    token: '',\r\n    value: null,\r\n    status: null,\r\n    error: null\r\n}\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            };\r\n        case SET_STATUS:\r\n            \r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setStatusAC = (status) => ({ type: SET_STATUS, status });\r\nexport const setUserDataAC = (token, name, status) => ({ type: SET_USER_DATA, payload: {name,token,status}});\r\nexport const setErrorAC = (error) => ({ type: SET_ERROR, error });\r\n\r\nexport const thunk = (data) => {\r\n    return async (dispatch) => {\r\n        try {\r\n         const response = await login({\r\n                user: {\r\n                    email: data.email,\r\n                    password: data.password,\r\n                }\r\n            })\r\n            let {token,username} = response.data.user;\r\n            let {status} = response.request;\r\n            dispatch(setUserDataAC(token, username, status));\r\n            sessionStorage.setItem('cool-jwt', response.data.user.token);\r\n            sessionStorage.setItem('cool-name', response.data.user.username);\r\n        } catch (error) {\r\n            dispatch(setErrorAC(error.response.data.errors))\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport const RegistrationThunk = (data) => {\r\n    return async (dispatch) => {\r\n        try {\r\n        const response = await register({\r\n                user: {\r\n                    email: data.email,\r\n                    password: data.password,\r\n                    username: data.name,\r\n                }\r\n            })\r\n            let {token,username} = response.data.user;\r\n            let {status} = response.request;\r\n            dispatch(setUserDataAC(token, username, status))\r\n            sessionStorage.setItem('cool-jwt', response.data.user.token);\r\n            sessionStorage.setItem('cool-name', response.data.user.username);\r\n        } catch (error) {\r\n            dispatch(setErrorAC(error.response.data.errors))\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport default mainReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport mainPageReducer from './mainPageReducer';\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    userData: mainPageReducer,\r\n})\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","export const getJwt = () => {\r\n    return sessionStorage.getItem('cool-jwt');\r\n  };\r\n\r\n  export const getName = () => {\r\n    return sessionStorage.getItem('cool-name');\r\n  }\r\n\r\n  export const isAuth = (value = false) => {\r\n    return getJwt() !== null\r\n  };\r\n\r\n  export const removeJwt = () => {\r\n      return sessionStorage.removeItem('cool-jwt');\r\n  }\r\n\r\n\r\n\r\n","import { connect } from 'react-redux';\r\nimport { RegistrationThunk } from '../../Redux/mainPageReducer';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport { Input } from 'antd';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as Yup from 'yup';\r\nimport cls from './registration.module.scss';\r\nimport { isAuth, getName } from '../../helpers/token';\r\n\r\nconst RegistrationPage = props => {\r\n  const { status, error, RegistrationThunk } = props;\r\n  let history = useHistory(); \r\n  if(isAuth() && getName() !== null) {\r\n    history.push(\"/forum\");\r\n}\r\n  if( status < 300 && status > 199) {\r\n      history.push(\"/forum\");\r\n  }\r\n  return (\r\n    <div className={cls.wrapper}>\r\n      <Formik\r\n        initialValues={{ email: \"\", name: \"\", password: \"\", confirm_password: \"\" }}\r\n        onSubmit={async (values, { setSubmitting }) => {\r\n          await new Promise(resolve => setTimeout(resolve, 1000));\r\n          setSubmitting(false);\r\n          RegistrationThunk({\r\n            email: values.email,\r\n            password: values.password,\r\n            name: values.name\r\n          })\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          confirm_password: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords dont match'),\r\n        })}\r\n      >\r\n\r\n        {props => {\r\n          const {\r\n            values,\r\n            touched,\r\n            errors,\r\n            dirty,\r\n            isSubmitting,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            handleReset\r\n          } = props;\r\n          return (\r\n            <form onSubmit={handleSubmit} className={cls.form}>\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Email\r\n              </label>\r\n              <Input\r\n                id=\"email\"\r\n                placeholder=\"Enter your email\"\r\n                type=\"text\"\r\n                value={values.email}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={cls.input}\r\n              />\r\n              {error !== null && error.email !== undefined && (\r\n                <div className={cls.errors}><p>{`Email ${String(error.email[0])}`}</p></div>\r\n              )}\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Name\r\n              </label>\r\n              <Input\r\n                id=\"name\"\r\n                placeholder=\"Enter your name\"\r\n                type=\"text\"\r\n                value={values.name}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={cls.input}\r\n              />\r\n              {error !== null && error.username !== undefined && (\r\n                <div className={cls.errors}><p>{`Name ${String(error.username[0])}`}</p></div>\r\n              )}\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Password\r\n              </label>\r\n              <Input\r\n                id=\"password\"\r\n                placeholder=\"Enter your name\"\r\n                type=\"password\"\r\n                value={values.password}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={cls.input}\r\n              />\r\n              {error !== null && error.password !== undefined && (\r\n                <div className={cls.errors}><p>{`Password ${String(error.password[0])}`}</p></div>\r\n              )}\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Repeat Password\r\n              </label>\r\n              <Input\r\n                id=\"confirm_password\"\r\n                placeholder=\"Enter your name\"\r\n                type=\"password\"\r\n                value={values.confirm_password}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={cls.input}\r\n              />\r\n              {errors.confirm_password && touched.confirm_password && (\r\n                <div className={cls.errors}><p>{errors.confirm_password}</p></div>\r\n              )}\r\n              <div className={cls.buttonsArea}>\r\n              <NavLink to='/forum/LoginPage'> Login page</NavLink>\r\n              <div>\r\n              <button\r\n                type=\"button\"\r\n                className=\"outline\"\r\n                onClick={handleReset}\r\n                disabled={!dirty || isSubmitting}\r\n              >\r\n                Reset\r\n              </button>\r\n              <button\r\n                type=\"submit\" disabled={isSubmitting}>\r\n                Submit\r\n                </button>\r\n                </div>\r\n                </div>\r\n            </form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  error: state.userData.error,\r\n  status: state.userData.status\r\n})\r\n\r\nconst RegistrationPageContainer = connect(mapStateToProps, { RegistrationThunk })(RegistrationPage)\r\n\r\nexport default RegistrationPageContainer;","import { connect } from 'react-redux';\r\nimport { thunk } from '../../Redux/mainPageReducer';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport { Input } from 'antd';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport cls from './login.module.scss';\r\nimport { isAuth,getJwt, getName } from '../../helpers/token';\r\n\r\nconst LoginPage = (props) => {\r\n    const { status, error, thunk } = props;\r\n    let history = useHistory(); \r\n\r\n    if(isAuth() && getName() !== null) {\r\n        history.push(\"/forum\");\r\n    }\r\n\r\n    if (status < 300 && status > 199) {\r\n        setTimeout(() => isAuth() && history.push(\"/forum\"), 10);\r\n        return 'redirecting...'\r\n        }\r\n    console.log(isAuth())\r\n    return (\r\n        <div className={cls.wrapper}>\r\n            <Formik\r\n                initialValues={{ email: \"\", password: \"\" }}\r\n                onSubmit={async values => {\r\n                    await new Promise(resolve => setTimeout(resolve, 500));\r\n                    thunk({\r\n                        email: values.email,\r\n                        password: values.password\r\n                    })\r\n                }}\r\n            >\r\n                {props => {\r\n                    const {\r\n                        values,\r\n                        dirty,\r\n                        isSubmitting,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                        handleReset\r\n                    } = props;\r\n                    return (\r\n                        <form onSubmit={handleSubmit} className={cls.form}>\r\n                            <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                                Email\r\n                             </label>\r\n                            <Input\r\n                                id=\"email\"\r\n                                placeholder=\"Enter your email\"\r\n                                type=\"text\"\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                className={cls.input}\r\n                            />\r\n                            <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                                password\r\n                                </label>\r\n                            <Input\r\n                                id=\"password\"\r\n                                placeholder=\"Enter your name\"\r\n                                type=\"password\"\r\n                                value={values.password}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                className={cls.input}\r\n                            />\r\n                            {error !== null && error !== 'undefined' && (\r\n                                <div className={cls.errors}><p>{`email or password ${error[\"email or password\"]}`}</p></div>\r\n                            )}\r\n                            <div className={cls.buttonsArea}>\r\n                                <NavLink to='/forum/Registration'>Register</NavLink>\r\n                                <div>\r\n                                    <button\r\n                                        type=\"button\"\r\n                                        className=\"outline\"\r\n                                        onClick={handleReset}\r\n                                        disabled={!dirty || isSubmitting}\r\n                                    >\r\n                                        Reset\r\n                                    </button>\r\n                                    <button\r\n                                        type=\"submit\" disabled={isSubmitting}\r\n                                        >\r\n                                        Submit\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </form>\r\n                    );\r\n                }}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    error: state.userData.error,\r\n    status: state.userData.status\r\n})\r\n\r\nconst LoginPageContainer = connect(mapStateToProps, { thunk })(LoginPage)\r\n\r\nexport default LoginPageContainer;","import { connect } from 'react-redux';\r\nimport { setStatusAC } from '../../Redux/mainPageReducer';\r\nimport React, { useState, useEffect } from 'react';\r\nimport cls from './main.module.scss';\r\nimport { removeJwt, getJwt, getName } from '../../helpers/token';\r\nimport axios from 'axios';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport instance from '../../API/API';\r\n\r\nconst MainPage = (props) => {\r\n  const [name, setName] = useState(null)\r\n  console.log(getJwt())\r\n  let history = useHistory(); \r\n\r\n  useEffect(() => {\r\n    const key = getJwt()\r\n    const fetchData = async () => {\r\n      if (key !== null) {\r\n        try {\r\n          const result = await instance.get('/api/user')\r\n          setName(getName())\r\n        } catch (error) {\r\n          if (error) {\r\n            removeJwt('cool-jwt')\r\n            props.setStatusAC({data: 401});\r\n            props.history.push('/forum/LoginPage')\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (name === null) {\r\n      fetchData();\r\n    }\r\n  }, [name, props ])\r\n\r\n  const deleteToken = () => {\r\n    removeJwt('cool-jwt')\r\n    props.history.push('/forum/LoginPage');\r\n    return props.setStatusAC({data: 401});\r\n  }\r\n\r\n  return (\r\n        <div className={cls.wrapper}>\r\n          <h3> {name} </h3>\r\n          <button\r\n            onClick={deleteToken}\r\n          > Выйти </button>\r\n        </div>\r\n  )\r\n}\r\n\r\nlet mapStateToProps = (state) => (\r\n  {\r\n    username: state.userData.username,\r\n    token: state.userData.token,\r\n    status: state.userData.status\r\n  }\r\n)\r\n\r\nconst mainPageContainer = connect(mapStateToProps, { setStatusAC })(MainPage);\r\n\r\nexport default mainPageContainer;","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { isAuth,getJwt } from \"./token\";\r\n\r\nexport const ProtectedRoute = ({\r\n  component: Component,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n        if (isAuth()) {\r\n            return <Component {...props} />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/forum/LoginPage\",\r\n                state: {\r\n                  from: props.location\r\n                }\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};","import React from 'react';\r\nimport './App.module.scss';\r\nimport RegistrationPageContainer from './Components/RegistrationPage/RegistrationPageContainer';\r\nimport LoginPageContainer from './Components/LoginPage/loginPageContainer';\r\nimport mainPageContainer from './Components/MainPage/MainPageContainer'\r\nimport {Switch, Route} from 'react-router-dom';\r\nimport { ProtectedRoute } from './helpers/protectedRoute';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Switch>\r\n      <Route path='/forum/LoginPage' component={LoginPageContainer} />\r\n      <Route path='/forum/Registration' component={RegistrationPageContainer}/>\r\n      <ProtectedRoute exact path='/forum/' component={mainPageContainer} />\r\n    </Switch>\r\n  ) \r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './Redux/redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"login_wrapper__1DHUi\",\"form\":\"login_form__2l9yv\",\"input\":\"login_input__2o3z6\",\"buttonsArea\":\"login_buttonsArea__1JAdq\",\"errors\":\"login_errors__H-sF-\"};"],"sourceRoot":""}