{"version":3,"sources":["API/API.js","Components/RegistrationPage/Registration.jsx","Components/LoginPage/loginPage.jsx","Components/MainPage/MainPage.jsx","App.jsx","serviceWorker.js","index.jsx","App.module.scss"],"names":["instance","axios","baseURL","RegistrationPage","props","useState","reqData","setreqData","console","log","to","initialValues","email","name","password","onSubmit","values","a","Promise","resolve","setTimeout","data","user","username","post","then","response","status","catch","error","errors","touched","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","htmlFor","style","display","id","placeholder","type","value","onChange","onBlur","className","undefined","String","email2","onClick","disabled","LoginPage","length","App","path","component","Registration","exact","MainPage","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.3b65fa10.chunk.js","sourcesContent":["import * as axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'http://conduit.productionready.io',\n});\n\n\nexport const postData = data =>\ninstance.post('/api/users', data)\n\n\nexport const loginData = (data) => \n  instance.post('/api/users/login', data)\n","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { Input } from 'antd';\nimport { postData } from '../../API/API';\n\nconst RegistrationPage = props => {\n  const [reqData, setreqData] = useState([]);\n  console.log(reqData)\n  return (\n    <div>\n      <NavLink to='/forum/LoginPage'> Login page</NavLink>\n      <Formik\n        initialValues={{ email: \"1@mail.ru\", name: \"2\", password: \"\" }}\n        onSubmit={async values => {\n          await new Promise(resolve => setTimeout(resolve, 500));\n          postData({\n            user: {\n              email: values.email,\n              password: values.password,\n              username: values.name,\n            }\n          }).then(response => setreqData(response.status))\n            .catch(error => setreqData(error.response.data.errors))\n        }}\n      >\n        {props => {\n          const {\n            values,\n            touched,\n            errors,\n            dirty,\n            isSubmitting,\n            handleChange,\n            handleBlur,\n            handleSubmit,\n            handleReset\n          } = props;\n          return (\n            <form onSubmit={handleSubmit}>\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\n                Email\n            </label>\n              <Input\n                id=\"email\"\n                placeholder=\"Enter your email\"\n                type=\"text\"\n                value={values.email}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                className={\n                  errors.email && touched.email\n                    ? \"text-input error\"\n                    : \"text-input\"\n                }\n              />\n              {errors.email && touched.email && (\n                <div className=\"input-feedback\">{errors.email}</div>\n              )}\n              {reqData.email !== undefined && (\n                <div>{`Email ${String(reqData.email)}`}</div>\n              )}\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\n                Name\n            </label>\n              <Input\n                id=\"name\"\n                placeholder=\"Enter your name\"\n                type=\"text\"\n                value={values.email2}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                className={\n                  errors.email2 && touched.email2\n                    ? \"text-input error\"\n                    : \"text-input\"\n                }\n              />\n              {errors.email2 && touched.email2 && (\n                <div className=\"input-feedback\">{errors.email2}</div>\n              )}\n              {reqData.username !== undefined && (\n                <div>{`Name ${String(reqData.username)}`}</div>\n              )}\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\n                Password\n            </label>\n              <Input\n                id=\"password\"\n                placeholder=\"Enter your name\"\n                type=\"text\"\n                value={values.email2}\n                onChange={handleChange}\n                onBlur={handleBlur}\n                className={\n                  errors.email2 && touched.email2\n                    ? \"text-input error\"\n                    : \"text-input\"\n                }\n              />\n              {errors.email2 && touched.email2 && (\n                <div className=\"input-feedback\">{errors.email2}</div>\n              )}\n              {reqData.password !== undefined && (\n                <div>{`Password ${String(reqData.password)}`}</div>\n              )}\n              <button\n                type=\"button\"\n                className=\"outline\"\n                onClick={handleReset}\n                disabled={!dirty || isSubmitting}\n              >\n                Reset\n            </button>\n              <button type=\"submit\" disabled={isSubmitting}>\n                Submit\n            </button>\n            </form>\n          );\n        }}\n      </Formik>\n    </div>\n  )\n}\nexport default RegistrationPage;\n","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport { Input } from 'antd';\nimport { loginData } from '../../API/API';\n\nconst LoginPage = () => {\n    const [reqData, setreqData] = useState('');\n    console.log(reqData)\n    return (\n        <div>\n            <NavLink to='/forum/Registration'> Registration page</NavLink>\n            <Formik\n                initialValues={{ email: \"1\", password: \"\" }}\n                onSubmit={async values => {\n                    await new Promise(resolve => setTimeout(resolve, 500));\n                    loginData({\n                        user: {\n                            email: values.email,\n                            password: values.password,\n                        }\n                    }).then(response => setreqData(response.status))\n                        .catch(error => setreqData(error.response.data.errors['email or password']))\n                }}\n            >\n                {props => {\n                    const {\n                        values,\n                        touched,\n                        errors,\n                        dirty,\n                        isSubmitting,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        handleReset\n                    } = props;\n                    return (\n                        <form onSubmit={handleSubmit}>\n                            {reqData === 422 && <label htmlFor=\"email\" style={{ display: \"block\" }}>\n                                Неверное имя пользователя или пароль\n                             </label>}\n                            <label htmlFor=\"email\" style={{ display: \"block\" }}>\n                                Email\n                             </label>\n                            <Input\n                                id=\"email\"\n                                placeholder=\"Enter your email\"\n                                type=\"text\"\n                                value={values.email}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                className={\n                                    errors.email && touched.email\n                                        ? \"text-input error\"\n                                        : \"text-input\"\n                                }\n                            />\n                            {errors.email && touched.email && (\n                                <div className=\"input-feedback\">{errors.email}</div>\n                            )}\n                            <label htmlFor=\"email\" style={{ display: \"block\" }}>\n                                password\n                                </label>\n                            <Input\n                                id=\"password\"\n                                placeholder=\"Enter your name\"\n                                type=\"password\"\n                                value={values.email2}\n                                onChange={handleChange}\n                                onBlur={handleBlur}\n                                className={\n                                    errors.email2 && touched.email2\n                                        ? \"text-input error\"\n                                        : \"text-input\"\n                                }\n                            />\n                            {errors.email2 && touched.email2 && (\n                                <div className=\"input-feedback\">{errors.email2}</div>\n                            )}\n                            {reqData.length > 0 && (\n                                <div>{`Email or Password ${String(reqData)}`}</div>\n                            )}\n                            <button\n                                type=\"button\"\n                                className=\"outline\"\n                                onClick={handleReset}\n                                disabled={!dirty || isSubmitting}\n                            >\n                                Reset\n                                 </button>\n                            <button type=\"submit\" disabled={isSubmitting}>\n                                Submit\n            </button>\n                        </form>\n                    );\n                }}\n            </Formik>\n        </div>\n    )\n}\n\nexport default LoginPage;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nconst LoginPage = () => {\n    return (\n        <div>\n          <button> <NavLink to='/forum/LoginPage'> Выйти</NavLink> </button> \n        </div>\n    )\n}\n\nexport default LoginPage;","import React from 'react';\nimport './App.module.scss';\nimport Registration from './Components/RegistrationPage/Registration';\nimport LoginPage from './Components/LoginPage/loginPage';\nimport MainPage from './Components/MainPage/MainPage'\nimport {BrowserRouter, Route} from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <Route path='/forum/LoginPage' component={LoginPage} />\n      <Route path='/forum/Registration' component={Registration}/>\n      <Route exact path='/forum/' component={MainPage} />\n    </BrowserRouter>\n  ) \n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__2a4FT\",\"ul\":\"App_ul__1ntJx\",\"ticketsArea\":\"App_ticketsArea__1z9yy\",\"wrapper\":\"App_wrapper__RCHjb\",\"img\":\"App_img__KttCg\"};"],"sourceRoot":""}