{"version":3,"sources":["Redux/mainPageReducer.js","Redux/redux.js","API/API.js","Components/RegistrationPage/Registration.jsx","Components/RegistrationPage/RegistrationPageContainer.jsx","Components/LoginPage/loginPage.jsx","Components/LoginPage/loginPageContainer.jsx","Components/MainPage/MainPage.jsx","Components/MainPage/MainPageContainer.jsx","App.jsx","serviceWorker.js","index.jsx","App.module.scss"],"names":["initialState","username","token","value","setTokenAC","data","type","mainReducer","state","action","user","reducers","combineReducers","mainPage","mainPageReducer","store","createStore","applyMiddleware","thunkMiddleware","window","instance","axios","baseURL","RegistrationPage","props","useState","reqData","setreqData","console","log","status","registrationToken","to","initialValues","email","name","password","onSubmit","values","a","Promise","resolve","setTimeout","post","then","response","catch","error","errors","touched","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","htmlFor","style","display","id","placeholder","onChange","onBlur","className","undefined","String","email2","onClick","disabled","RegistrationPageContainer","connect","LoginPage","Object","takeToken","length","LoginPageContainer","mainPageContainer","App","path","component","exact","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.334c39ac.chunk.js","sourcesContent":["const SET_NAME = 'SET_NAME';\r\nconst SET_TOKEN = 'SET_TOKEN';\r\nconst SET_VALUE = 'SET_VALUE';\r\n\r\nlet initialState = {\r\n    username: '',\r\n    token: '',\r\n    value: '',\r\n}\r\n\r\nconst mainReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_NAME:\r\n            return {\r\n                ...state,\r\n                username: action.data.user.username\r\n            };\r\n        case SET_TOKEN:\r\n            return {\r\n                ...state,\r\n                token: action.data.user.token\r\n            };\r\n        case SET_VALUE:\r\n            return {\r\n                ...state,\r\n                value: action.data\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setNameAC = (data) => ({ type: SET_NAME, data: data });\r\nexport const setTokenAC = (data) => ({ type: SET_TOKEN, data: data });\r\nexport const setValueAC = (data) => ({ type: SET_VALUE, data: data });\r\n\r\nexport default mainReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport mainPageReducer from './mainPageReducer';\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nlet reducers = combineReducers({\r\n    mainPage: mainPageReducer,\r\n})\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import * as axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'http://conduit.productionready.io',\r\n});\r\n\r\n\r\nexport const postData = data =>\r\ninstance.post('/api/users', data)\r\n\r\n\r\nexport const loginData = (data) => \r\n  instance.post('/api/users/login', data)\r\n\r\nexport const authData = (data) => \r\n  instance.get('/api/user', {\r\n    withCredentials: true,\r\n    headers: {\r\n      Authorization: data\r\n    }\r\n  })","import React, { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport { Input } from 'antd';\r\nimport { postData } from '../../API/API';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst RegistrationPage = props => {\r\n const [reqData, setreqData] = useState('');\r\n console.log(reqData.data)\r\n  const registrationToken = (reqData) => {\r\n    props.setTokenAC(reqData);\r\n}\r\nif( reqData.status === 200 ) {\r\n  registrationToken(reqData.data)\r\n}\r\nif(reqData.status === 200) {\r\n    return <Redirect to={\"/forum\"} /> ;\r\n}\r\n  return (\r\n    <div>\r\n      <NavLink to='/forum/LoginPage'> Login page</NavLink>\r\n      <Formik\r\n        initialValues={{ email: \"1@mail.ru\", name: \"2\", password: \"\" }}\r\n        onSubmit={async values => {\r\n          await new Promise(resolve => setTimeout(resolve, 500));\r\n          postData({\r\n            user: {\r\n              email: values.email,\r\n              password: values.password,\r\n              username: values.name,\r\n            }\r\n          }).then(response => setreqData(response))\r\n            .catch(error => setreqData(error.response.data.errors))\r\n        }}\r\n      >\r\n        {props => {\r\n          const {\r\n            values,\r\n            touched,\r\n            errors,\r\n            dirty,\r\n            isSubmitting,\r\n            handleChange,\r\n            handleBlur,\r\n            handleSubmit,\r\n            handleReset\r\n          } = props;\r\n          return (\r\n            <form onSubmit={handleSubmit}>\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Email\r\n            </label>\r\n              <Input\r\n                id=\"email\"\r\n                placeholder=\"Enter your email\"\r\n                type=\"text\"\r\n                value={values.email}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={\r\n                  errors.email && touched.email\r\n                    ? \"text-input error\"\r\n                    : \"text-input\"\r\n                }\r\n              />\r\n              {errors.email && touched.email && (\r\n                <div className=\"input-feedback\">{errors.email}</div>\r\n              )}\r\n              {reqData.email !== undefined && (\r\n                <div>{`Email ${String(reqData.email)}`}</div>\r\n              )}\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Name\r\n            </label>\r\n              <Input\r\n                id=\"name\"\r\n                placeholder=\"Enter your name\"\r\n                type=\"text\"\r\n                value={values.email2}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={\r\n                  errors.email2 && touched.email2\r\n                    ? \"text-input error\"\r\n                    : \"text-input\"\r\n                }\r\n              />\r\n              {errors.email2 && touched.email2 && (\r\n                <div className=\"input-feedback\">{errors.email2}</div>\r\n              )}\r\n              {reqData.username !== undefined && (\r\n                <div>{`Name ${String(reqData.username)}`}</div>\r\n              )}\r\n              <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                Password\r\n            </label>\r\n              <Input\r\n                id=\"password\"\r\n                placeholder=\"Enter your name\"\r\n                type=\"text\"\r\n                value={values.email2}\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                className={\r\n                  errors.email2 && touched.email2\r\n                    ? \"text-input error\"\r\n                    : \"text-input\"\r\n                }\r\n              />\r\n              {errors.email2 && touched.email2 && (\r\n                <div className=\"input-feedback\">{errors.email2}</div>\r\n              )}\r\n              {reqData.password !== undefined && (\r\n                <div>{`Password ${String(reqData.password)}`}</div>\r\n              )}\r\n              <button\r\n                type=\"button\"\r\n                className=\"outline\"\r\n                onClick={handleReset}\r\n                disabled={!dirty || isSubmitting}\r\n              >\r\n                Reset\r\n            </button>\r\n              <button type=\"submit\" disabled={isSubmitting}>\r\n                Submit\r\n            </button>\r\n            </form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\nexport default RegistrationPage;\r\n","import { connect } from 'react-redux';\r\nimport RegistrationPage from './Registration'\r\nimport {setTokenAC} from '../../Redux/mainPageReducer'\r\n\r\nconst RegistrationPageContainer = connect(null,{setTokenAC})(RegistrationPage)\r\n\r\nexport default RegistrationPageContainer;","import React, { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { Formik } from 'formik';\r\nimport { Input } from 'antd';\r\nimport { loginData } from '../../API/API';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst LoginPage = (props) => {\r\n    const [reqData, setreqData] = useState('');\r\n    const takeToken = (reqData) => {\r\n        props.setTokenAC(reqData);\r\n    }\r\n    if( reqData instanceof Object ) {\r\n        takeToken(reqData.data)\r\n    }\r\n    if(reqData.status === 200) {\r\n        return <Redirect to={\"/forum\"} /> ;\r\n    }\r\n    return (\r\n        <div>\r\n            <NavLink to='/forum/Registration'> Registration page</NavLink>\r\n            <Formik\r\n                initialValues={{ email: \"1\", password: \"\" }}\r\n                onSubmit={async values => {\r\n                    await new Promise(resolve => setTimeout(resolve, 500));\r\n                    loginData({\r\n                        user: {\r\n                            email: values.email,\r\n                            password: values.password,\r\n                        }\r\n                    }).then(response => setreqData(response))\r\n                        .catch(error => setreqData(error.response.data.errors['email or password']))\r\n                }}\r\n            >\r\n                {props => {\r\n                    const {\r\n                        values,\r\n                        touched,\r\n                        errors,\r\n                        dirty,\r\n                        isSubmitting,\r\n                        handleChange,\r\n                        handleBlur,\r\n                        handleSubmit,\r\n                        handleReset\r\n                    } = props;\r\n                    return (\r\n                        <form onSubmit={handleSubmit}>\r\n                            {reqData === 422 && <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                                Неверное имя пользователя или пароль\r\n                             </label>}\r\n                            <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                                Email\r\n                             </label>\r\n                            <Input\r\n                                id=\"email\"\r\n                                placeholder=\"Enter your email\"\r\n                                type=\"text\"\r\n                                value={values.email}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                className={\r\n                                    errors.email && touched.email\r\n                                        ? \"text-input error\"\r\n                                        : \"text-input\"\r\n                                }\r\n                            />\r\n                            {errors.email && touched.email && (\r\n                                <div className=\"input-feedback\">{errors.email}</div>\r\n                            )}\r\n                            <label htmlFor=\"email\" style={{ display: \"block\" }}>\r\n                                password\r\n                                </label>\r\n                            <Input\r\n                                id=\"password\"\r\n                                placeholder=\"Enter your name\"\r\n                                type=\"password\"\r\n                                value={values.email2}\r\n                                onChange={handleChange}\r\n                                onBlur={handleBlur}\r\n                                className={\r\n                                    errors.email2 && touched.email2\r\n                                        ? \"text-input error\"\r\n                                        : \"text-input\"\r\n                                }\r\n                            />\r\n                            {errors.email2 && touched.email2 && (\r\n                                <div className=\"input-feedback\">{errors.email2}</div>\r\n                            )}\r\n                            {reqData.length > 0 && (\r\n                                <div>{`Email or Password ${String(reqData)}`}</div>\r\n                            )}\r\n                            <button\r\n                                type=\"button\"\r\n                                className=\"outline\"\r\n                                onClick={handleReset}\r\n                                disabled={!dirty || isSubmitting}\r\n                            >\r\n                                Reset\r\n                                 </button>\r\n                            <button type=\"submit\" disabled={isSubmitting}>\r\n                                Submit\r\n            </button>\r\n                        </form>\r\n                    );\r\n                }}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginPage;","import { connect } from 'react-redux';\r\nimport LoginPage from './loginPage'\r\nimport {setTokenAC} from '../../Redux/mainPageReducer'\r\n\r\nconst LoginPageContainer = connect(null,{setTokenAC})(LoginPage)\r\n\r\nexport default LoginPageContainer;","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst mainPage = (props) => {\r\n  console.log(props)\r\n  if(props.token.length === 0)\r\n  {\r\n    return <Redirect to={\"/forum/LoginPage\"} /> ;\r\n  }\r\n  const deleteToken = () => {\r\n    return props.setTokenAC({\r\n      user: {\r\n        token: ''\r\n      }\r\n    });\r\n  }\r\n    return (\r\n        <div>\r\n          \r\n          <button onClick={() => deleteToken()}> Выйти </button> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default mainPage;","import { connect } from 'react-redux';\r\nimport mainPage from './MainPage';\r\nimport {setTokenAC} from '../../Redux/mainPageReducer'\r\n\r\nlet mapStateToProps = (state) => (\r\n  {\r\n    username: state.mainPage.username,\r\n    token: state.mainPage.token,\r\n  }\r\n)\r\n\r\n\r\n\r\nconst mainPageContainer = connect(mapStateToProps, {setTokenAC})(mainPage);\r\n\r\nexport default mainPageContainer;","import React from 'react';\r\nimport './App.module.scss';\r\nimport RegistrationPageContainer from './Components/RegistrationPage/RegistrationPageContainer';\r\nimport LoginPageContainer from './Components/LoginPage/loginPageContainer';\r\nimport mainPageContainer from './Components/MainPage/MainPageContainer'\r\nimport {BrowserRouter, Route} from 'react-router-dom';\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Route path='/forum/LoginPage' component={LoginPageContainer} />\r\n      <Route path='/forum/Registration' component={RegistrationPageContainer}/>\r\n      <Route exact path='/forum/' component={mainPageContainer} />\r\n    </BrowserRouter>\r\n  ) \r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './Redux/redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__3Aexq\",\"ul\":\"App_ul__zXSjm\",\"ticketsArea\":\"App_ticketsArea__lzTW3\",\"wrapper\":\"App_wrapper__2HLsp\",\"img\":\"App_img__3MMz6\"};"],"sourceRoot":""}